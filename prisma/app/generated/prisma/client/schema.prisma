// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "app/generated/prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Site {
  id                  Int     @id @default(autoincrement())
  header_image        String  @default("header.jpg")
  header_image_credit String?
  title               String
  name                String
  motto               String
  greeting            String
  description         String
  detail              String
  copyright           String
  year                Int
  privacy_policy      String?
  contact_email       String?
  contact_phone       String?

  @@map(name: "sites")
}

model Updates {
  id     Int       @id @default(autoincrement())
  title  String
  update String
  date   DateTime?

  @@map(name: "updates")
}

model Social {
  id       Int     @id @default(autoincrement())
  name     String
  username String
  embed    Boolean @default(false)

  @@map(name: "socials")
}

model Project {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  link        String?

  @@map(name: "projects")
}

model Post {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String?
  content           Content[]
  main_image        String
  main_image_credit String?
  date              DateTime
  month             Int?
  year              Int?
  categories        CategoriesOnPosts[]
  published         Boolean             @default(false)
  author            User?               @relation(fields: [authorId], references: [id])
  authorId          Int?

  @@map(name: "posts")
}

model Content {
  id       Int     @id @default(autoincrement())
  type     String
  content  String?
  sequence Int?
  post     Post?   @relation(fields: [postId], references: [id])
  postId   Int? //is Foreign Key

  @@map(name: "content")
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  posts CategoriesOnPosts[]

  @@map(name: "categories")
}

model CategoriesOnPosts {
  id         Int      @default(autoincrement())
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([postId, categoryId])
  @@map(name: "categoriesonposts")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  password      String?
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  profile       Profile?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Profile {
  id       Int     @id @default(autoincrement())
  author   User?   @relation(fields: [authorId], references: [id])
  authorId Int?    @unique
  status   String?
  image    String?
  about    String?
  phone    String?
  email    String?

  @@map(name: "profile")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
